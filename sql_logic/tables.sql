

-- Создаем базу данных
CREATE DATABASE IF NOT EXISTS project_api

-- Создаём таблицу user
CREATE TABLE IF NOT EXISTS USERS (
    USER_ID                 INTEGER NOT NULL GENERATED ALWAYS AS IDENTITY (START WITH 1 INCREMENT BY 1),

    EMAIL                   VARCHAR(128) NOT NULL,
    PASSWORD                VARCHAR(256) NOT NULL,

    TOKEN                   VARCHAR(256) DEFAULT NULL,
    TOKEN_ACTIVATION_DATE   TIMESTAMP (0) DEFAULT NOW(),


    CONSTRAINT PRIMARY_KEY_USER_ID PRIMARY KEY (USER_ID),
    CONSTRAINT UNIQUE_USERS_EMAIL UNIQUE(EMAIL)
);


-- Создаём таблицу users_template в которой будет находиться почта, пароль,
-- токен активации. Это промужуточная стадия регистрации, в которую
-- будет помещён пользователь, кторый не подтвердил свой аккаунт
-- с помощью токена активации, который пришёл ему на почту.
CREATE TABLE IF NOT EXISTS USERS_TEMPLATE(
    EMAIL               VARCHAR(128) NOT NULL,
    PASSWORD            VARCHAR(256) NOT NULL,

    NAME                VARCHAR(128) NOT NULL,
    LAST_NAME           VARCHAR(128) NOT NULL,

    TOKEN_ACTIVATE      VARCHAR(256) DEFAULT NULL,
    DATE_REGISTRATION   TIMESTAMP(0) WITHOUT TIME ZONE,


    CONSTRAINT UNIQUE_USERS_TEMPLATE_EMAIL UNIQUE(EMAIL)
);


-- Создаём таблицу user_info
CREATE TABLE IF NOT EXISTS USERS_INFO (
    USER_ID         INTEGER NOT NULL,

    NAME            VARCHAR(128) NOT NULL,
    LAST_NAME       VARCHAR(128) NOT NULL,

    STATUS          VARCHAR(16) DEFAULT 'NEW',
    GROUP_ID        INTEGER DEFAULT NULL,
    UNIVERSITY      VARCHAR(256) DEFAULT NULL,

    CITY            VARCHAR(128) DEFAULT NULL,
    COUNTRY         VARCHAR(128) DEFAULT NULL,

    ABOUT_YOU       TEXT DEFAULT NULL,


    CONSTRAINT FOREIGN_KEY_USER_ID FOREIGN KEY (USER_ID) REFERENCES USERS (USER_ID) ON DELETE CASCADE,
    CONSTRAINT UNIQUE_USER_USER_ID UNIQUE(USER_ID)
);


-- ...
CREATE TABLE USERS_GROUPS(
    GROUP_ID        INTEGER NOT NULL PRIMARY KEY GENERATED ALWAYS AS IDENTITY (START WITH 1 INCREMENT BY 1),
    USER_ID         INTEGER NOT NULL REFERENCES USERS (USER_ID) ON DELETE CASCADE,
    GROUP_NAME      VARCHAR(32) NOT NULL,
    MEMBERS         INTEGER DEFAULT 1 NOT NULL,
    -- COUNT_ITEMS     INTEGER DEFAULT 0 NOT NULL,

    CREATE_DATE TIMESTAMP(0) WITHOUT TIME ZONE
);


-- ...
CREATE TABLE GROUPS_ITEMS(
    ITEM_ID     INTEGER NOT NULL PRIMARY KEY GENERATED ALWAYS AS IDENTITY (START WITH 1 INCREMENT BY 1),
    GROUP_ID    INTEGER NOT NULL REFERENCES USERS_GROUPS (GROUP_ID) ON DELETE CASCADE,
    ITEM_NAME   VARCHAR(32) NOT NULL,

    CREATE_DATE TIMESTAMP(0) WITHOUT TIME ZONE
);


-- ...
CREATE TABLE USERS_BALLS(
    -- ID          INTEGER NOT NULL GENERATED ALWAYS AS IDENTITY (START WITH 1 INCREMENT BY 1),
    USER_ID     INTEGER NOT NULL REFERENCES USERS (USER_ID) ON DELETE CASCADE,
    GROUP_ID    INTEGER NOT NULL REFERENCES USERS_GROUPS (GROUP_ID) ON DELETE CASCADE,
    ITEM_ID     INTEGER NOT NULL REFERENCES GROUPS_ITEMS (ITEM_ID) ON DELETE CASCADE,
    BALL        INTEGER DEFAULT 0 NOT NULL,

    UPDATE_DATE TIMESTAMP(0) WITHOUT TIME ZONE
);


-- Создаём табличку логирования данных... вообще по-хорошему хорошо бы разделить
-- логи на две таблицу, где логироваться будут админы и тимлиды -- в разных
-- таблицах... ну да это пофигу нам сейчас.
CREATE TABLE IF NOT EXISTS LOGS (
    ID_LOG          INTEGER NOT NULL GENERATED ALWAYS AS IDENTITY (START WITH 1 INCREMENT BY 1),
    USER_ID         INTEGER NOT NULL GENERATED ALWAYS AS IDENTITY (START WITH 1 INCREMENT BY 1),

    DATE            DATE NOT NULL,

    METHOD          VARCHAR(256) DEFAULT 'NULL' NOT NULL,
    QUERY           TEXT DEFAULT 'NULL' NOT NULL
);