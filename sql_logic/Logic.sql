

-- 
CREATE FUNCTION CREATE_USERS_GROUP(
    EMAIL               USERS.EMAIL%TYPE,
    TOKEN               USERS.TOKEN%TYPE,

    USER_GROUP          USERS_GROUPS.GROUP_NAME%TYPE
)

RETURNS INTEGER AS

$$
DECLARE

    USER_TOKEN_TIME     USERS.TOKEN_ACTIVATION_DATE%TYPE;

    USER_USER_ID        USERS_INFO.USER_ID%TYPE;
    USER_STATUS         USERS_INFO.STATUS%TYPE;

BEGIN

    -- 
    SELECT  USERS.TOKEN_ACTIVATION_DATE, USERS_INFO.USER_ID, USERS_INFO.STATUS
    INTO    USER_TOKEN_TIME, USER_USER_ID, USER_STATUS
    FROM    USERS JOIN USERS_INFO
    ON      USERS.USER_ID = USERS_INFO.USER_ID
    WHERE   USERS.EMAIL = $1 AND USERS.TOKEN = $2;

    IF SESSION(USER_TOKEN_TIME) = False THEN
        -- RETURN 'NEED AUTHORISATE OR REGISTARTE!';
        RETURN 1303;
    
    ELSEIF USER_STATUS != 'NEW' THEN
        -- RETURN 'YOUR STATUS IS NOT "NEW"!';
        RETURN 1402;
    
    END IF;


    IF EXISTS (SELECT 1 FROM USERS_GROUPS WHERE USERS_GROUPS.GROUP_NAME = LOWER($3)) THEN
        -- RETURN 'THIS GROUP NAME IS EXISTS!';
        RETURN 1304;
    
    ELSE
        -- 
        INSERT INTO USERS_GROUPS (USER_ID, GROUP_NAME, MEMBERS, CREATE_DATE)
        VALUES      (USER_USER_ID, LOWER($3), 1, NOW());
        
        UPDATE  USERS_INFO
        SET     STATUS = 'TEAM_LEAD', GROUP_ID = LASTVAL()
        WHERE   USERS_INFO.USER_ID = USER_USER_ID;

        -- RETURN 'CEATE GROUP!';
        RETURN 1205;

    END IF;

END;
$$

LANGUAGE plpgsql;



-- 
CREATE FUNCTION DELETE_USERS_GROUP(
    EMAIL           USERS.EMAIL%TYPE,
    TOKEN           USERS.TOKEN%TYPE
)

RETURNS INTEGER AS

$$
DECLARE

    USER_TOKEN_TIME USERS.TOKEN_ACTIVATION_DATE%TYPE;

    USER_USER_ID    USERS_INFO.USER_ID%TYPE;
    USER_STATUS     USERS_INFO.STATUS%TYPE;

BEGIN

    SELECT  USERS.TOKEN_ACTIVATION_DATE, USERS_INFO.USER_ID,
            USERS_INFO.STATUS
    INTO    USER_TOKEN_TIME, USER_USER_ID, USER_STATUS
    FROM    USERS JOIN USERS_INFO
    ON      USERS.USER_ID = USERS_INFO.USER_ID
    WHERE USERS.EMAIL = $1 AND USERS.TOKEN = $2;

    IF SESSION(USER_TOKEN_TIME) = False THEN
        -- RETURN 'NEED AUTHORISATE OR REGISTARTE!';
        RETURN 1303;
    
    ELSEIF USER_STATUS != 'TEAM_LEAD' THEN
        -- RETURN 'YOUR STATUS IS NOT "TEAM_LEAD"!';
        RETURN 1403;
    
    END IF;
    
    IF  EXISTS (SELECT 1 FROM USERS_GROUPS WHERE USERS_GROUPS.USER_ID = USER_USER_ID
                    AND USERS_GROUPS.MEMBERS > 1) THEN
        -- RETURN 'MORE USERS IN GROUP!';
        RETURN 1404;
        
    ELSE
        DELETE FROM USERS_GROUPS
        WHERE       USERS_GROUPS.USER_ID = USER_USER_ID;
        
        UPDATE  USERS_INFO
        SET     STATUS = 'NEW', GROUP_ID = NULL
        WHERE   USERS_INFO.USER_ID = USER_USER_ID;

        -- RETURN 'DELETE GROUP!';
        RETURN 1206;
    
    END IF;

END;
$$

LANGUAGE plpgsql;



-- 
CREATE FUNCTION ADD_USERS_IN_GROUP(
    EMAIL           USERS.EMAIL%TYPE,
    TOKEN           USERS.TOKEN%TYPE,

    ADD_EMAIL       USERS.EMAIL%TYPE
)

RETURNS INTEGER AS

$$
DECLARE

    USER_TOKEN_TIME     USERS.TOKEN_ACTIVATION_DATE%TYPE;

    USER_USER_ID        USERS_INFO.USER_ID%TYPE;
    USER_STATUS         USERS_INFO.STATUS%TYPE;
    USER_GROUP          USERS_INFO.GROUP_ID%TYPE;

    ADD_USER_USER_ID    USERS_INFO.USER_ID%TYPE;
    ADD_USER_STATUS     USERS_INFO.STATUS%TYPE;

    ADD_ITEM_ID         GROUPS_ITEMS.ITEM_ID%TYPE;

BEGIN

    -- 
    SELECT  USERS.TOKEN_ACTIVATION_DATE, USERS_INFO.USER_ID,
        USERS_INFO.STATUS,USERS_INFO.GROUP_ID
    INTO    USER_TOKEN_TIME, USER_USER_ID, USER_STATUS, USER_GROUP
    FROM    USERS JOIN USERS_INFO
    ON      USERS.USER_ID = USERS_INFO.USER_ID
    WHERE   USERS.EMAIL = $1 AND USERS.TOKEN = $2;

    IF SESSION(USER_TOKEN_TIME) = False THEN
        -- RETURN 'NEED AUTHORISATE OR REGISTARTE!';
        RETURN 1303;

    ELSEIF USER_STATUS != 'TEAM_LEAD' THEN
        -- RETURN 'YOUR STATUS IS NOT "TEAM_LEAD"!';
        RETURN 1403;
    
    END IF;


    -- 
    SELECT  USERS_INFO.USER_ID, USERS_INFO.STATUS
    INTO    ADD_USER_USER_ID, ADD_USER_STATUS
    FROM    USERS JOIN USERS_INFO
    ON      USERS.USER_ID = USERS_INFO.USER_ID
    WHERE   USERS.EMAIL = $3;

    IF ADD_USER_USER_ID IS NULL THEN
        RETURN 1400;
    END IF;

    IF  ADD_USER_STATUS != 'NEW' THEN
        -- RETURN 'THIS USER IN GROUP!';
        RETURN 1305;

    ELSE
        UPDATE  USERS_GROUPS
        SET     MEMBERS = (SELECT MEMBERS FROM USERS_GROUPS
                                WHERE GROUP_ID = USER_GROUP) + 1
        WHERE   GROUP_ID = USER_GROUP;

        UPDATE  USERS_INFO
        SET     STATUS = 'MEMBER', GROUP_ID = USER_GROUP
        WHERE   USERS_INFO.USER_ID = ADD_USER_USER_ID;

-- ////// делитнуть из табличку USERS_BALLS данного пользователя

        FOR ADD_ITEM_ID IN (SELECT DISTINCT GROUPS_ITEMS.ITEM_ID FROM GROUPS_ITEMS
                            WHERE GROUPS_ITEMS.GROUP_ID = USER_GROUP) LOOP
            
            INSERT INTO USERS_BALLS (USER_ID, GROUP_ID, ITEM_ID, BALL, UPDATE_DATE)
            VALUES      (ADD_USER_USER_ID, USER_GROUP, ADD_ITEM_ID, 0, NOW());
        
        END LOOP;

        -- RETURN 'ADD USER IN GROUP!';
        RETURN 1207;
        
    END IF;

END;
$$

LANGUAGE plpgsqL;



-- 
CREATE FUNCTION DELETE_USERS_IN_GROUP(
    EMAIL           USERS.EMAIL%TYPE,
    TOKEN           USERS.TOKEN%TYPE,

    DELETE_EMAIL    USERS.EMAIL%TYPE
)

RETURNS INTEGER AS

$$
DECLARE

    USER_TOKEN_TIME     USERS.TOKEN_ACTIVATION_DATE%TYPE;

    USER_STATUS         USERS_INFO.STATUS%TYPE;
    USER_GROUP          USERS_INFO.GROUP_ID%TYPE;

    DEL_USER_USER_ID    USERS_INFO.USER_ID%TYPE;
    DEL_USER_GROUP      USERS_INFO.GROUP_ID%TYPE;

    ADD_ITEM_ID         GROUPS_ITEMS.ITEM_ID%TYPE;

BEGIN

    IF EMAIL = DELETE_EMAIL THEN
        -- RETURN 'YOU CAN NOT DELETE YOURSELF!))';
        RETURN 1405;
    END IF;

    -- 
    SELECT  USERS.TOKEN_ACTIVATION_DATE, USERS_INFO.STATUS, USERS_INFO.GROUP_ID
    INTO    USER_TOKEN_TIME, USER_STATUS, USER_GROUP
    FROM    USERS JOIN USERS_INFO
    ON      USERS.USER_ID = USERS_INFO.USER_ID
    WHERE   USERS.EMAIL = $1 AND USERS.TOKEN = $2;

    IF SESSION(USER_TOKEN_TIME) = False THEN
        -- RETURN 'NEED AUTHORISATE OR REGISTARTE!';
        RETURN 1303;
    
    ELSEIF USER_STATUS != 'TEAM_LEAD' THEN
        -- RETURN 'YOUR STATUS IS NOT "TEAM_LEAD"!';
        RETURN 1403;
    
    END IF;
    
    -- 
    SELECT  USERS_INFO.USER_ID, USERS_INFO.GROUP_ID
    INTO    DEL_USER_USER_ID, DEL_USER_GROUP
    FROM    USERS JOIN USERS_INFO
    ON      USERS.USER_ID = USERS_INFO.USER_ID
    WHERE   USERS.EMAIL = $3;

    IF USER_GROUP != DEL_USER_GROUP THEN
        -- RETURN 'THIS USER NOT IN YOUR GROUP';
        RETURN 1406;
    
    ELSE
        --
        UPDATE  USERS_GROUPS
        SET     MEMBERS = (SELECT MEMBERS FROM USERS_GROUPS
                            WHERE GROUP_ID = USER_GROUP) - 1
        WHERE   USERS_GROUPS.GROUP_ID = USER_GROUP;

        UPDATE  USERS_INFO
        SET     STATUS = 'NEW', GROUP_ID = NULL
        WHERE   USERS_INFO.USER_ID = DEL_USER_USER_ID;

-- ///// делитнуть из табличку USERS_BALLS данного пользователя

        DELETE FROM USERS_BALLS
        WHERE       USERS_BALLS.USER_ID = DEL_USER_USER_ID AND USERS_BALLS.GROUP_ID = DEL_USER_GROUP;

        -- RETURN 'DELETE USER IN GROUP';
        RETURN 1208;
    
    END IF;

END;
$$

LANGUAGE plpgsqL;



-- -- -- 
-- -- -- Здесь будет функция осуществляющая выход из группы.
-- -- -- 



-- -- -- 
-- -- -- Возможно здесь будет функция позволяющая пользователям
-- -- -- самим вступать в группы!



-- 
CREATE FUNCTION ADD_ITEMS_IN_GROUP(
    EMAIL           USERS.EMAIL%TYPE,
    TOKEN           USERS.TOKEN%TYPE,

    ITEM            VARCHAR(32)
)

RETURNS INTEGER AS

$$
DECLARE

    USER_TOKEN_TIME USERS.TOKEN_ACTIVATION_DATE%TYPE;
    USER_STATUS     USERS_INFO.STATUS%TYPE;
    USER_GROUP      USERS_INFO.GROUP_ID%TYPE;

    ITER            INTEGER;

BEGIN

    SELECT  USERS.TOKEN_ACTIVATION_DATE, USERS_INFO.STATUS,
            USERS_INFO.GROUP_ID
    INTO    USER_TOKEN_TIME, USER_STATUS, USER_GROUP
    FROM    USERS JOIN USERS_INFO
    ON      USERS.USER_ID = USERS_INFO.USER_ID
    WHERE   USERS.EMAIL = $1 AND USERS.TOKEN = $2;

    IF SESSION(USER_TOKEN_TIME) = False THEN
        -- RETURN 'NEED AUTHORISATE OR REGISTARTE!';
        RETURN 1303;
    
    ELSEIF USER_STATUS != 'TEAM_LEAD' THEN
        -- RETURN 'YOUR STATUS IS NOT "TEAM_LEAD"!';
        RETURN 1403;
    
    END IF;


    IF EXISTS (SELECT 1 FROM GROUPS_ITEMS WHERE GROUPS_ITEMS.ITEM_NAME = $3) THEN
        -- RETURN 'THIS ITEM NAME EXISTS IN GROUPS!';
        RETURN 1306;

    ELSE
        -- 
        INSERT INTO GROUPS_ITEMS (GROUP_ID, ITEM_NAME, CREATE_DATE)
        VALUES      (USER_GROUP, $3, NOW());

        -- INSERT INTO USERS_BALLS
        FOR ITER IN (SELECT USERS_INFO.USER_ID FROM USERS_INFO
                    WHERE USERS_INFO.GROUP_ID = USER_GROUP) LOOP

            INSERT INTO USERS_BALLS (USER_ID, GROUP_ID, ITEM_ID, BALL, UPDATE_DATE)
            VALUES      (ITER, USER_GROUP, LASTVAL(), 0, NOW());

        END LOOP;

        -- RETURN 'ADD NEW ITEM IN GROUP!';
        RETURN 1210;

    END IF;

END;
$$

LANGUAGE plpgsqL;



-- 
CREATE FUNCTION DELETE_ITEMS_IN_GROUP(
    EMAIL           USERS.EMAIL%TYPE,
    TOKEN           USERS.TOKEN%TYPE,

    ITEM            VARCHAR(32)
)

RETURNS INTEGER AS

$$
DECLARE

    TOKEN_TIME      USERS.TOKEN_ACTIVATION_DATE%TYPE;

    USER_STATUS     USERS_INFO.STATUS%TYPE;
    USER_GROUP      USERS_INFO.GROUP_ID%TYPE;

BEGIN

    -- 
    SELECT  USERS.TOKEN_ACTIVATION_DATE, USERS_INFO.STATUS, USERS_INFO.GROUP_ID
    INTO    TOKEN_TIME, USER_STATUS, USER_GROUP
    FROM    USERS JOIN USERS_INFO
    ON      USERS.USER_ID = USERS_INFO.USER_ID
    WHERE   USERS.EMAIL = $1 AND USERS.TOKEN = $2;

    IF SESSION(TOKEN_TIME) = False THEN
        -- RETURN 'NEED AUTHORISATE OR REGISTARTE!';
        RETURN 1303;
    
    ELSEIF USER_STATUS != 'TEAM_LEAD' THEN
        -- RETURN 'YOUR STATUS IS NOT "TEAM_LEAD"!';
        RETURN 1403;
    
    END IF;
    
    IF NOT EXISTS (SELECT 1 FROM GROUPS_ITEMS WHERE GROUPS_ITEMS.ITEM_NAME = ITEM) THEN
        -- RETURN 'THIS ITEM_NAME NO IN YOUR GROUP!';
        RETURN 1407;

    ELSE
        DELETE FROM GROUPS_ITEMS
        WHERE       GROUPS_ITEMS.ITEM_NAME = ITEM;

        -- RETURN 'DELETE ITEM!';
        RETURN 1211;

    END IF;

END;
$$

LANGUAGE plpgsql;



-- Функуия которая обновляла бы данные в группе
CREATE FUNCTION UPDATE_DATA_IN_GROUP(
    EMAIL           USERS.EMAIL%TYPE,
    TOKEN           USERS.TOKEN%TYPE,      

    UPDATE_EMAIL    USERS.EMAIL%TYPE,
    UPDATE_BALL     INTEGER,
    ITEM            USERS_BALLS.ITEM_ID%TYPE
)

RETURNS INTEGER AS

$$
DECLARE

    TOKEN_TIME      USERS.TOKEN_ACTIVATION_DATE%TYPE;

    USER_STATUS     USERS_INFO.STATUS%TYPE;
    USER_GROUP      USERS_INFO.GROUP_ID%TYPE;

    UPDATE_USER_ID  USERS.USER_ID%TYPE;
    -- UPDATE_ITEM_ID  GROUPS_ITEMS.ITEM_ID%TYPE;

BEGIN

    -- 
    SELECT  USERS.TOKEN_ACTIVATION_DATE, USERS_INFO.STATUS, USERS_INFO.GROUP_ID
    INTO    TOKEN_TIME, USER_STATUS, USER_GROUP
    FROM    USERS JOIN USERS_INFO
    ON      USERS.USER_ID = USERS_INFO.USER_ID
    WHERE   USERS.EMAIL = $1 AND USERS.TOKEN = $2;

    -- То что 
    IF SESSION(TOKEN_TIME) = False THEN
        -- RETURN 'NEED AUTHORISATE OR REGISTARTE!';
        RETURN 1303;
    
    ELSEIF USER_STATUS != 'TEAM_LEAD' THEN
        -- RETURN 'YOUR STATUS IS NOT "TEAM_LEAD"!';
        RETURN 1403;
    
    END IF;


    SELECT  USERS.USER_ID
    INTO    UPDATE_USER_ID
    FROM    USERS JOIN USERS_INFO
    ON      USERS.USER_ID = USERS_INFO.USER_ID
    WHERE   USERS_INFO.GROUP_ID = USER_GROUP AND USERS.EMAIL = $3;

    -- 
    IF UPDATE_USER_ID IS NULL THEN
        -- RETURN 'THIS USER NOT IN YOUR GROUP';
        RETURN 1408;
    
    ELSE
        UPDATE  USERS_BALLS
        SET     BALL = (SELECT USERS_BALLS.BALL FROM USERS_BALLS WHERE USERS_BALLS.USER_ID = UPDATE_USER_ID
                        AND USERS_BALLS.ITEM_ID = $5) + UPDATE_BALL,
                UPDATE_DATE = NOW()
        WHERE   USERS_BALLS.USER_ID = UPDATE_USER_ID AND USERS_BALLS.ITEM_ID = $5;

        -- RETURN 'UPDATE DATA IN GROUP';
        RETURN 1212;

    END IF;

END;
$$

LANGUAGE plpgsqL;



-- Функция которая покажет все предметы в группе
CREATE FUNCTION SELECT_ITEMS_IN_GROUP(
    EMAIL           USERS.EMAIL%TYPE,
    TOKEN           USERS.TOKEN%TYPE
)

RETURNS TABLE(ITEM_ID INTEGER, ITEM_NAME VARCHAR(32)) AS

$$
DECLARE

    TOKEN_TIME      USERS.TOKEN_ACTIVATION_DATE%TYPE;

    USER_STATUS     USERS_INFO.STATUS%TYPE;
    USER_GROUP      USERS_INFO.GROUP_ID%TYPE;

BEGIN

    SELECT  USERS.TOKEN_ACTIVATION_DATE, USERS_INFO.STATUS, USERS_INFO.GROUP_ID
    INTO    TOKEN_TIME, USER_STATUS, USER_GROUP
    FROM    USERS JOIN USERS_INFO
    ON      USERS.USER_ID = USERS_INFO.USER_ID
    WHERE   USERS.EMAIL = $1 AND USERS.TOKEN = $2;

    IF NOT SESSION(TOKEN_TIME) THEN
        RETURN;
    
    ELSEIF USER_STATUS != 'MEMBER' AND USER_STATUS != 'TEAM_LEAD' THEN
        RETURN;
    
    END IF;

    RETURN QUERY (SELECT GROUPS_ITEMS.ITEM_ID, GROUPS_ITEMS.ITEM_NAME
                  FROM   GROUPS_ITEMS
                  WHERE  GROUPS_ITEMS.GROUP_ID = USER_GROUP);

END;
$$

LANGUAGE plpgsql;



-- Функция которая бы позволяла просмотреть данные в группу.
CREATE FUNCTION SELECT_DATA_IN_GROUP(
    EMAIL           USERS.EMAIL%TYPE,
    TOKEN           USERS.TOKEN%TYPE,

    ITEM            USERS_BALLS.ITEM_ID%TYPE
)

RETURNS TABLE(ID INTEGER, NAME VARCHAR(128), LAST_NAME VARCHAR(128), BALL INTEGER) AS

$$
DECLARE

    TOKEN_TIME      USERS.TOKEN_ACTIVATION_DATE%TYPE;

    USER_STATUS     USERS_INFO.STATUS%TYPE;
    USER_GROUP      USERS_INFO.GROUP_ID%TYPE;

BEGIN

    -- 
    SELECT  USERS.TOKEN_ACTIVATION_DATE, USERS_INFO.STATUS, USERS_INFO.GROUP_ID
    INTO    TOKEN_TIME, USER_STATUS, USER_GROUP
    FROM    USERS JOIN USERS_INFO
    ON      USERS.USER_ID = USERS_INFO.USER_ID
    WHERE   USERS.EMAIL = $1 AND USERS.TOKEN = $2;

    IF SESSION(TOKEN_TIME) = False THEN
        RETURN;
    
    ELSEIF USER_STATUS != 'MEMBER' AND USER_STATUS != 'TEAM_LEAD' THEN
        RETURN;

    END IF;

    RETURN QUERY (SELECT USERS_INFO.USER_ID, USERS_INFO.NAME, USERS_INFO.LAST_NAME, USERS_BALLS.BALL
                  FROM   USERS_INFO JOIN USERS_BALLS
                  ON     USERS_INFO.USER_ID = USERS_BALLS.USER_ID
                  WHERE  USERS_BALLS.ITEM_ID = $3);

END;
$$

LANGUAGE plpgsqL;